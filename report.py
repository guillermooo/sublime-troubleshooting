from .editor_info import EditorInfo
from .data import DataSection
from .data import DataItem


# TODO: use abc module.
class MarkDownWriterMixin(object):

    def __init__(self):
        # We can't start adding stuff right away, we need to call .collect_markup() first.
        self.buf = None

    def write(self, text):
        self.buf.append(text)

    def write_line(self, text=''):
        self.buf.append(text + '\n')

    def h3(self, text):
        self.write_line('### ' + text)

    def quote(self, text):
        self.write_line('> ' + text)

    def italics(self, text):
        self.write('*{0}*'.format(text))

    def collect_markup(self, callback):
        old_buf = self.buf
        self.buf = []
        callback()
        text = ''.join(self.buf)
        self.buf = old_buf
        return text


class Report(MarkDownWriterMixin):

    def __init__(self):
        super().__init__()
        self.infos = []
        self.infos.append(EditorInfo.from_current_editor())

    def generate(self):
        footer = '''---
This report was generated by the [Troubleshooting][self] package.

[self]: https://bitbucket.org/guillermooo/sublime-troubleshooting
'''
        def cb():
            nonlocal info
            self.h3(info.title + ' (as provided by ' + info.provider + ')') # title is required for a section
            if info.description:
                self.write_line()
                self.italics(info.description)
                self.write_line()
                self.write_line()

        buf = []
        for info in self.infos:
            buf.append(self.collect_markup(cb))
            buf.append(self.generate_from_elements(info.elements))
        buf.append('\n' + footer)
        return ''.join(buf)

    def generate_from_elements(self, elements):
        def cb():
            nonlocal element
            self.quote(element.name + ': ' + element.value)

        buf = []
        for element in elements:
            if isinstance(element, DataItem):
                buf.append(self.collect_markup(cb))
        return ''.join(buf)


def plugin_loaded():
    print(Report().generate())
